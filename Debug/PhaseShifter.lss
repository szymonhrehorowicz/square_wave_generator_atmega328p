
PhaseShifter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000678  0000070c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800166  00800166  00000772  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000772  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fb  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073d  00000000  00000000  00001127  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b8  00000000  00000000  00001864  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000442  00000000  00000000  00001d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000347  00000000  00000000  00002196  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000024dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_4>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  9e:	0c 94 3a 03 	jmp	0x674	; 0x674 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setFrequencies>:
			}
		}
    }
}

void setFrequencies(Frequency *frequencies) {
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	c4 56       	subi	r28, 0x64	; 100
  c0:	d1 09       	sbc	r29, r1
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	9c 01       	movw	r18, r24
	uint32_t icrs[NUMBER_OF_FREQUENCIES] = {21599, 43199, 21599, 14399, 10799, 8639, 34559, 17279, 11519, 8639, 55295, 27647, 13823, 9215, 6911, 5529, 2764, 1381, 921, 690};
  ce:	80 e5       	ldi	r24, 0x50	; 80
  d0:	e2 e0       	ldi	r30, 0x02	; 2
  d2:	f1 e0       	ldi	r31, 0x01	; 1
  d4:	de 01       	movw	r26, r28
  d6:	11 96       	adiw	r26, 0x01	; 1
  d8:	01 90       	ld	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	8a 95       	dec	r24
  de:	e1 f7       	brne	.-8      	; 0xd8 <setFrequencies+0x32>
	uint8_t prescalers[NUMBER_OF_FREQUENCIES] = {4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
  e0:	84 e1       	ldi	r24, 0x14	; 20
  e2:	e2 e5       	ldi	r30, 0x52	; 82
  e4:	f1 e0       	ldi	r31, 0x01	; 1
  e6:	de 01       	movw	r26, r28
  e8:	af 5a       	subi	r26, 0xAF	; 175
  ea:	bf 4f       	sbci	r27, 0xFF	; 255
  ec:	01 90       	ld	r0, Z+
  ee:	0d 92       	st	X+, r0
  f0:	8a 95       	dec	r24
  f2:	e1 f7       	brne	.-8      	; 0xec <setFrequencies+0x46>
	
	
	for(uint8_t i = 0; i < NUMBER_OF_FREQUENCIES; i++){
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	4b c0       	rjmp	.+150    	; 0x18e <setFrequencies+0xe8>
		static uint8_t multiplyer = 0b00000000;
		static uint8_t base = 0b00001000;
		static uint8_t counter = 0;
		uint8_t mask = base | multiplyer;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <multiplyer.1635>
 100:	48 2f       	mov	r20, r24
 102:	46 2b       	or	r20, r22
		
		frequencies[i].key = mask;
 104:	a9 2f       	mov	r26, r25
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	fd 01       	movw	r30, r26
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ea 0f       	add	r30, r26
 110:	fb 1f       	adc	r31, r27
 112:	ee 0f       	add	r30, r30
 114:	ff 1f       	adc	r31, r31
 116:	5f 01       	movw	r10, r30
 118:	a2 0e       	add	r10, r18
 11a:	b3 1e       	adc	r11, r19
 11c:	f5 01       	movw	r30, r10
 11e:	40 83       	st	Z, r20
		frequencies[i].icr = icrs[i];
 120:	ad 01       	movw	r20, r26
 122:	44 0f       	add	r20, r20
 124:	55 1f       	adc	r21, r21
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	01 e0       	ldi	r16, 0x01	; 1
 12c:	10 e0       	ldi	r17, 0x00	; 0
 12e:	0c 0f       	add	r16, r28
 130:	1d 1f       	adc	r17, r29
 132:	40 0f       	add	r20, r16
 134:	51 1f       	adc	r21, r17
 136:	fa 01       	movw	r30, r20
 138:	c0 80       	ld	r12, Z
 13a:	d1 80       	ldd	r13, Z+1	; 0x01
 13c:	e2 80       	ldd	r14, Z+2	; 0x02
 13e:	f3 80       	ldd	r15, Z+3	; 0x03
 140:	f5 01       	movw	r30, r10
 142:	c1 82       	std	Z+1, r12	; 0x01
 144:	d2 82       	std	Z+2, r13	; 0x02
 146:	e3 82       	std	Z+3, r14	; 0x03
 148:	f4 82       	std	Z+4, r15	; 0x04
		frequencies[i].prescaler = prescalers[i];
 14a:	01 e5       	ldi	r16, 0x51	; 81
 14c:	10 e0       	ldi	r17, 0x00	; 0
 14e:	0c 0f       	add	r16, r28
 150:	1d 1f       	adc	r17, r29
 152:	a0 0f       	add	r26, r16
 154:	b1 1f       	adc	r27, r17
 156:	4c 91       	ld	r20, X
 158:	45 83       	std	Z+5, r20	; 0x05
		
		if(counter >= 4) {
 15a:	40 91 66 01 	lds	r20, 0x0166	; 0x800166 <__data_end>
 15e:	44 30       	cpi	r20, 0x04	; 4
 160:	78 f0       	brcs	.+30     	; 0x180 <setFrequencies+0xda>
			counter = 0;
 162:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <__data_end>
			base = 0b00001000;
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			if(multiplyer == 0) {
 16c:	61 11       	cpse	r22, r1
 16e:	04 c0       	rjmp	.+8      	; 0x178 <setFrequencies+0xd2>
				multiplyer = 0x01;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <multiplyer.1635>
 176:	0a c0       	rjmp	.+20     	; 0x18c <setFrequencies+0xe6>
				}else {
				multiplyer <<= 1;
 178:	66 0f       	add	r22, r22
 17a:	60 93 67 01 	sts	0x0167, r22	; 0x800167 <multiplyer.1635>
 17e:	06 c0       	rjmp	.+12     	; 0x18c <setFrequencies+0xe6>
			}
			}else {
			counter++;
 180:	4f 5f       	subi	r20, 0xFF	; 255
 182:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <__data_end>
			base <<= 1;
 186:	88 0f       	add	r24, r24
 188:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
void setFrequencies(Frequency *frequencies) {
	uint32_t icrs[NUMBER_OF_FREQUENCIES] = {21599, 43199, 21599, 14399, 10799, 8639, 34559, 17279, 11519, 8639, 55295, 27647, 13823, 9215, 6911, 5529, 2764, 1381, 921, 690};
	uint8_t prescalers[NUMBER_OF_FREQUENCIES] = {4, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
	
	
	for(uint8_t i = 0; i < NUMBER_OF_FREQUENCIES; i++){
 18c:	9f 5f       	subi	r25, 0xFF	; 255
 18e:	94 31       	cpi	r25, 0x14	; 20
 190:	08 f4       	brcc	.+2      	; 0x194 <setFrequencies+0xee>
 192:	b2 cf       	rjmp	.-156    	; 0xf8 <setFrequencies+0x52>
			}else {
			counter++;
			base <<= 1;
		}
	}
}
 194:	cc 59       	subi	r28, 0x9C	; 156
 196:	df 4f       	sbci	r29, 0xFF	; 255
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	bf 90       	pop	r11
 1b4:	af 90       	pop	r10
 1b6:	08 95       	ret

000001b8 <setup>:

void setup(Frequency newFrequency){
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <setup+0x14>
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <setup+0x16>
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <setup+0x18>
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	49 83       	std	Y+1, r20	; 0x01
 1d6:	5a 83       	std	Y+2, r21	; 0x02
 1d8:	6b 83       	std	Y+3, r22	; 0x03
 1da:	7c 83       	std	Y+4, r23	; 0x04
 1dc:	8d 83       	std	Y+5, r24	; 0x05
 1de:	9e 83       	std	Y+6, r25	; 0x06
	DDRB |= (1<<PB1);
 1e0:	84 b1       	in	r24, 0x04	; 4
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<PB2);
 1e6:	84 b1       	in	r24, 0x04	; 4
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	84 b9       	out	0x04, r24	; 4
	
	TCCR1B = 0x18;
 1ec:	01 e8       	ldi	r16, 0x81	; 129
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	88 e1       	ldi	r24, 0x18	; 24
 1f2:	f8 01       	movw	r30, r16
 1f4:	80 83       	st	Z, r24
	TCCR1A = 0x50;
 1f6:	68 94       	set
 1f8:	ee 24       	eor	r14, r14
 1fa:	e7 f8       	bld	r14, 7
 1fc:	f1 2c       	mov	r15, r1
 1fe:	0f 2e       	mov	r0, r31
 200:	f0 e5       	ldi	r31, 0x50	; 80
 202:	bf 2e       	mov	r11, r31
 204:	f0 2d       	mov	r31, r0
 206:	f7 01       	movw	r30, r14
 208:	b0 82       	st	Z, r11
	
	ICR1 = newFrequency.icr;
 20a:	8a 81       	ldd	r24, Y+2	; 0x02
 20c:	9b 81       	ldd	r25, Y+3	; 0x03
 20e:	ac 81       	ldd	r26, Y+4	; 0x04
 210:	bd 81       	ldd	r27, Y+5	; 0x05
 212:	0f 2e       	mov	r0, r31
 214:	f6 e8       	ldi	r31, 0x86	; 134
 216:	cf 2e       	mov	r12, r31
 218:	d1 2c       	mov	r13, r1
 21a:	f0 2d       	mov	r31, r0
 21c:	f6 01       	movw	r30, r12
 21e:	91 83       	std	Z+1, r25	; 0x01
 220:	80 83       	st	Z, r24
	OCR1A = (int) (ICR1 * 0.02);
 222:	60 81       	ld	r22, Z
 224:	71 81       	ldd	r23, Z+1	; 0x01
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 3f 02 	call	0x47e	; 0x47e <__floatunsisf>
 22e:	2a e0       	ldi	r18, 0x0A	; 10
 230:	37 ed       	ldi	r19, 0xD7	; 215
 232:	43 ea       	ldi	r20, 0xA3	; 163
 234:	5c e3       	ldi	r21, 0x3C	; 60
 236:	0e 94 a5 02 	call	0x54a	; 0x54a <__mulsf3>
 23a:	0e 94 09 02 	call	0x412	; 0x412 <__fixsfsi>
 23e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 242:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = (int) (ICR1 * 0.51);
 246:	f6 01       	movw	r30, r12
 248:	60 81       	ld	r22, Z
 24a:	71 81       	ldd	r23, Z+1	; 0x01
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	0e 94 3f 02 	call	0x47e	; 0x47e <__floatunsisf>
 254:	2c e5       	ldi	r18, 0x5C	; 92
 256:	3f e8       	ldi	r19, 0x8F	; 143
 258:	42 e0       	ldi	r20, 0x02	; 2
 25a:	5f e3       	ldi	r21, 0x3F	; 63
 25c:	0e 94 a5 02 	call	0x54a	; 0x54a <__mulsf3>
 260:	0e 94 09 02 	call	0x412	; 0x412 <__fixsfsi>
 264:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 268:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TCNT1 = 0x0;
 26c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 270:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	
	TCCR1A = 0xA0;
 274:	80 ea       	ldi	r24, 0xA0	; 160
 276:	f7 01       	movw	r30, r14
 278:	80 83       	st	Z, r24
	TCCR1C = 0xC0;
 27a:	80 ec       	ldi	r24, 0xC0	; 192
 27c:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
	TCCR1A = 0x50;
 280:	b0 82       	st	Z, r11
	
	TCCR1B |= newFrequency.prescaler;
 282:	f8 01       	movw	r30, r16
 284:	90 81       	ld	r25, Z
 286:	8e 81       	ldd	r24, Y+6	; 0x06
 288:	89 2b       	or	r24, r25
 28a:	80 83       	st	Z, r24
}
 28c:	26 96       	adiw	r28, 0x06	; 6
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	df 91       	pop	r29
 29a:	cf 91       	pop	r28
 29c:	1f 91       	pop	r17
 29e:	0f 91       	pop	r16
 2a0:	ff 90       	pop	r15
 2a2:	ef 90       	pop	r14
 2a4:	df 90       	pop	r13
 2a6:	cf 90       	pop	r12
 2a8:	bf 90       	pop	r11
 2aa:	08 95       	ret

000002ac <main>:
ISR(PCINT1_vect);



int main(void)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	c8 57       	subi	r28, 0x78	; 120
 2b6:	d1 09       	sbc	r29, r1
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
	// LEDs setup
	DDRD = 0xFF;		// set all as output
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	8a b9       	out	0x0a, r24	; 10

	// Button interrupt setup
	DDRC &= 0b11011111; // set PC5 as an input
 2c6:	87 b1       	in	r24, 0x07	; 7
 2c8:	8f 7d       	andi	r24, 0xDF	; 223
 2ca:	87 b9       	out	0x07, r24	; 7
	PORTC = 0b00100000; // enable pull-up resistor at PC5
 2cc:	90 e2       	ldi	r25, 0x20	; 32
 2ce:	98 b9       	out	0x08, r25	; 8
	
	PCICR |= (1 << PCIE1);
 2d0:	e8 e6       	ldi	r30, 0x68	; 104
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	80 81       	ld	r24, Z
 2d6:	82 60       	ori	r24, 0x02	; 2
 2d8:	80 83       	st	Z, r24
	PCMSK1 = (1 << PCINT13);
 2da:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	
	// Enable interrupts
	sei();
 2de:	78 94       	sei
	
	// Create frequencies array and set it up
	Frequency frequencies[NUMBER_OF_FREQUENCIES];
	setFrequencies(frequencies);
 2e0:	ce 01       	movw	r24, r28
 2e2:	01 96       	adiw	r24, 0x01	; 1
 2e4:	0e 94 53 00 	call	0xa6	; 0xa6 <setFrequencies>

	uint8_t currentMask, previousMask;
	currentMask = baseStatus | multiplyerStatus;
 2e8:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <baseStatus>
 2ec:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <multiplyerStatus>
 2f0:	08 2b       	or	r16, r24
	previousMask = currentMask;
	
	// Set up initial frequency as 1Hz
	setup(frequencies[0]);
 2f2:	49 81       	ldd	r20, Y+1	; 0x01
 2f4:	5a 81       	ldd	r21, Y+2	; 0x02
 2f6:	6b 81       	ldd	r22, Y+3	; 0x03
 2f8:	7c 81       	ldd	r23, Y+4	; 0x04
 2fa:	8d 81       	ldd	r24, Y+5	; 0x05
 2fc:	9e 81       	ldd	r25, Y+6	; 0x06
 2fe:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <setup>
	
    while (1) 
    {
		currentMask = baseStatus | multiplyerStatus;
 302:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <baseStatus>
 306:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <multiplyerStatus>
 30a:	18 2b       	or	r17, r24
		PORTD = currentMask;
 30c:	1b b9       	out	0x0b, r17	; 11
		
		if(currentMask != previousMask) {
 30e:	01 13       	cpse	r16, r17
 310:	28 c0       	rjmp	.+80     	; 0x362 <main+0xb6>
 312:	f7 cf       	rjmp	.-18     	; 0x302 <main+0x56>
			previousMask = currentMask;
			for(uint8_t i = 0; i < NUMBER_OF_FREQUENCIES; i++) {
				if(currentMask == frequencies[i].key) {
 314:	28 2f       	mov	r18, r24
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	f9 01       	movw	r30, r18
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	e2 0f       	add	r30, r18
 320:	f3 1f       	adc	r31, r19
 322:	ee 0f       	add	r30, r30
 324:	ff 1f       	adc	r31, r31
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	50 e0       	ldi	r21, 0x00	; 0
 32a:	4c 0f       	add	r20, r28
 32c:	5d 1f       	adc	r21, r29
 32e:	e4 0f       	add	r30, r20
 330:	f5 1f       	adc	r31, r21
 332:	90 81       	ld	r25, Z
 334:	19 13       	cpse	r17, r25
 336:	13 c0       	rjmp	.+38     	; 0x35e <main+0xb2>
					setup(frequencies[i]);
 338:	f9 01       	movw	r30, r18
 33a:	ee 0f       	add	r30, r30
 33c:	ff 1f       	adc	r31, r31
 33e:	e2 0f       	add	r30, r18
 340:	f3 1f       	adc	r31, r19
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	e4 0f       	add	r30, r20
 348:	f5 1f       	adc	r31, r21
 34a:	49 2f       	mov	r20, r25
 34c:	51 81       	ldd	r21, Z+1	; 0x01
 34e:	62 81       	ldd	r22, Z+2	; 0x02
 350:	73 81       	ldd	r23, Z+3	; 0x03
 352:	84 81       	ldd	r24, Z+4	; 0x04
 354:	95 81       	ldd	r25, Z+5	; 0x05
 356:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <setup>
    {
		currentMask = baseStatus | multiplyerStatus;
		PORTD = currentMask;
		
		if(currentMask != previousMask) {
			previousMask = currentMask;
 35a:	01 2f       	mov	r16, r17
			for(uint8_t i = 0; i < NUMBER_OF_FREQUENCIES; i++) {
				if(currentMask == frequencies[i].key) {
					setup(frequencies[i]);
					break;
 35c:	d2 cf       	rjmp	.-92     	; 0x302 <main+0x56>
		currentMask = baseStatus | multiplyerStatus;
		PORTD = currentMask;
		
		if(currentMask != previousMask) {
			previousMask = currentMask;
			for(uint8_t i = 0; i < NUMBER_OF_FREQUENCIES; i++) {
 35e:	8f 5f       	subi	r24, 0xFF	; 255
 360:	01 c0       	rjmp	.+2      	; 0x364 <main+0xb8>
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	84 31       	cpi	r24, 0x14	; 20
 366:	b0 f2       	brcs	.-84     	; 0x314 <main+0x68>
    {
		currentMask = baseStatus | multiplyerStatus;
		PORTD = currentMask;
		
		if(currentMask != previousMask) {
			previousMask = currentMask;
 368:	01 2f       	mov	r16, r17
 36a:	cb cf       	rjmp	.-106    	; 0x302 <main+0x56>

0000036c <incrementMultiplyer>:
}

void incrementMultiplyer() {
	// 0b00000111
	// 1000 100 10
	if(multiplyerStatus >= 0x04) {
 36c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <multiplyerStatus>
 370:	84 30       	cpi	r24, 0x04	; 4
 372:	18 f0       	brcs	.+6      	; 0x37a <incrementMultiplyer+0xe>
		multiplyerStatus = 0x00;
 374:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <multiplyerStatus>
 378:	08 95       	ret
		}else {
		if(multiplyerStatus == 0x00) {
 37a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <multiplyerStatus>
 37e:	81 11       	cpse	r24, r1
 380:	04 c0       	rjmp	.+8      	; 0x38a <incrementMultiplyer+0x1e>
			multiplyerStatus = 0x01;
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <multiplyerStatus>
 388:	08 95       	ret
			}else {
			multiplyerStatus <<= 1;
 38a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <multiplyerStatus>
 38e:	88 0f       	add	r24, r24
 390:	80 93 69 01 	sts	0x0169, r24	; 0x800169 <multiplyerStatus>
 394:	08 95       	ret

00000396 <incrementBase>:
}

void incrementBase() {
	// 0b11111000;
	// 8 6 4 2 1
	if(baseStatus >= 0x80) {
 396:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <baseStatus>
 39a:	88 23       	and	r24, r24
 39c:	34 f4       	brge	.+12     	; 0x3aa <incrementBase+0x14>
		baseStatus = 0x08;
 39e:	88 e0       	ldi	r24, 0x08	; 8
 3a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <baseStatus>
		incrementMultiplyer();
 3a4:	0e 94 b6 01 	call	0x36c	; 0x36c <incrementMultiplyer>
 3a8:	08 95       	ret
		}else {
		baseStatus <<= 1;
 3aa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <baseStatus>
 3ae:	88 0f       	add	r24, r24
 3b0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <baseStatus>
 3b4:	08 95       	ret

000003b6 <__vector_4>:
	}
}

ISR(PCINT1_vect) {
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	2f 93       	push	r18
 3c2:	3f 93       	push	r19
 3c4:	4f 93       	push	r20
 3c6:	5f 93       	push	r21
 3c8:	6f 93       	push	r22
 3ca:	7f 93       	push	r23
 3cc:	8f 93       	push	r24
 3ce:	9f 93       	push	r25
 3d0:	af 93       	push	r26
 3d2:	bf 93       	push	r27
 3d4:	ef 93       	push	r30
 3d6:	ff 93       	push	r31
	if(!changed){
 3d8:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <changed>
 3dc:	81 11       	cpse	r24, r1
 3de:	06 c0       	rjmp	.+12     	; 0x3ec <__vector_4+0x36>
		changed = true;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <changed>
		incrementBase();
 3e6:	0e 94 cb 01 	call	0x396	; 0x396 <incrementBase>
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <__vector_4+0x3a>
		}else {
		changed = false;
 3ec:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <changed>
	}
 3f0:	ff 91       	pop	r31
 3f2:	ef 91       	pop	r30
 3f4:	bf 91       	pop	r27
 3f6:	af 91       	pop	r26
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	7f 91       	pop	r23
 3fe:	6f 91       	pop	r22
 400:	5f 91       	pop	r21
 402:	4f 91       	pop	r20
 404:	3f 91       	pop	r19
 406:	2f 91       	pop	r18
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__fixsfsi>:
 412:	0e 94 10 02 	call	0x420	; 0x420 <__fixunssfsi>
 416:	68 94       	set
 418:	b1 11       	cpse	r27, r1
 41a:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_szero>
 41e:	08 95       	ret

00000420 <__fixunssfsi>:
 420:	0e 94 84 02 	call	0x508	; 0x508 <__fp_splitA>
 424:	88 f0       	brcs	.+34     	; 0x448 <__fixunssfsi+0x28>
 426:	9f 57       	subi	r25, 0x7F	; 127
 428:	98 f0       	brcs	.+38     	; 0x450 <__fixunssfsi+0x30>
 42a:	b9 2f       	mov	r27, r25
 42c:	99 27       	eor	r25, r25
 42e:	b7 51       	subi	r27, 0x17	; 23
 430:	b0 f0       	brcs	.+44     	; 0x45e <__fixunssfsi+0x3e>
 432:	e1 f0       	breq	.+56     	; 0x46c <__fixunssfsi+0x4c>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	88 1f       	adc	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	1a f0       	brmi	.+6      	; 0x444 <__fixunssfsi+0x24>
 43e:	ba 95       	dec	r27
 440:	c9 f7       	brne	.-14     	; 0x434 <__fixunssfsi+0x14>
 442:	14 c0       	rjmp	.+40     	; 0x46c <__fixunssfsi+0x4c>
 444:	b1 30       	cpi	r27, 0x01	; 1
 446:	91 f0       	breq	.+36     	; 0x46c <__fixunssfsi+0x4c>
 448:	0e 94 9e 02 	call	0x53c	; 0x53c <__fp_zero>
 44c:	b1 e0       	ldi	r27, 0x01	; 1
 44e:	08 95       	ret
 450:	0c 94 9e 02 	jmp	0x53c	; 0x53c <__fp_zero>
 454:	67 2f       	mov	r22, r23
 456:	78 2f       	mov	r23, r24
 458:	88 27       	eor	r24, r24
 45a:	b8 5f       	subi	r27, 0xF8	; 248
 45c:	39 f0       	breq	.+14     	; 0x46c <__fixunssfsi+0x4c>
 45e:	b9 3f       	cpi	r27, 0xF9	; 249
 460:	cc f3       	brlt	.-14     	; 0x454 <__fixunssfsi+0x34>
 462:	86 95       	lsr	r24
 464:	77 95       	ror	r23
 466:	67 95       	ror	r22
 468:	b3 95       	inc	r27
 46a:	d9 f7       	brne	.-10     	; 0x462 <__fixunssfsi+0x42>
 46c:	3e f4       	brtc	.+14     	; 0x47c <__fixunssfsi+0x5c>
 46e:	90 95       	com	r25
 470:	80 95       	com	r24
 472:	70 95       	com	r23
 474:	61 95       	neg	r22
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	08 95       	ret

0000047e <__floatunsisf>:
 47e:	e8 94       	clt
 480:	09 c0       	rjmp	.+18     	; 0x494 <__floatsisf+0x12>

00000482 <__floatsisf>:
 482:	97 fb       	bst	r25, 7
 484:	3e f4       	brtc	.+14     	; 0x494 <__floatsisf+0x12>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	99 23       	and	r25, r25
 496:	a9 f0       	breq	.+42     	; 0x4c2 <__floatsisf+0x40>
 498:	f9 2f       	mov	r31, r25
 49a:	96 e9       	ldi	r25, 0x96	; 150
 49c:	bb 27       	eor	r27, r27
 49e:	93 95       	inc	r25
 4a0:	f6 95       	lsr	r31
 4a2:	87 95       	ror	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b7 95       	ror	r27
 4aa:	f1 11       	cpse	r31, r1
 4ac:	f8 cf       	rjmp	.-16     	; 0x49e <__floatsisf+0x1c>
 4ae:	fa f4       	brpl	.+62     	; 0x4ee <__floatsisf+0x6c>
 4b0:	bb 0f       	add	r27, r27
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__floatsisf+0x36>
 4b4:	60 ff       	sbrs	r22, 0
 4b6:	1b c0       	rjmp	.+54     	; 0x4ee <__floatsisf+0x6c>
 4b8:	6f 5f       	subi	r22, 0xFF	; 255
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	16 c0       	rjmp	.+44     	; 0x4ee <__floatsisf+0x6c>
 4c2:	88 23       	and	r24, r24
 4c4:	11 f0       	breq	.+4      	; 0x4ca <__floatsisf+0x48>
 4c6:	96 e9       	ldi	r25, 0x96	; 150
 4c8:	11 c0       	rjmp	.+34     	; 0x4ec <__floatsisf+0x6a>
 4ca:	77 23       	and	r23, r23
 4cc:	21 f0       	breq	.+8      	; 0x4d6 <__floatsisf+0x54>
 4ce:	9e e8       	ldi	r25, 0x8E	; 142
 4d0:	87 2f       	mov	r24, r23
 4d2:	76 2f       	mov	r23, r22
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__floatsisf+0x5e>
 4d6:	66 23       	and	r22, r22
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <__floatsisf+0x74>
 4da:	96 e8       	ldi	r25, 0x86	; 134
 4dc:	86 2f       	mov	r24, r22
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	2a f0       	brmi	.+10     	; 0x4ee <__floatsisf+0x6c>
 4e4:	9a 95       	dec	r25
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	da f7       	brpl	.-10     	; 0x4e4 <__floatsisf+0x62>
 4ee:	88 0f       	add	r24, r24
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret

000004f8 <__fp_split3>:
 4f8:	57 fd       	sbrc	r21, 7
 4fa:	90 58       	subi	r25, 0x80	; 128
 4fc:	44 0f       	add	r20, r20
 4fe:	55 1f       	adc	r21, r21
 500:	59 f0       	breq	.+22     	; 0x518 <__fp_splitA+0x10>
 502:	5f 3f       	cpi	r21, 0xFF	; 255
 504:	71 f0       	breq	.+28     	; 0x522 <__fp_splitA+0x1a>
 506:	47 95       	ror	r20

00000508 <__fp_splitA>:
 508:	88 0f       	add	r24, r24
 50a:	97 fb       	bst	r25, 7
 50c:	99 1f       	adc	r25, r25
 50e:	61 f0       	breq	.+24     	; 0x528 <__fp_splitA+0x20>
 510:	9f 3f       	cpi	r25, 0xFF	; 255
 512:	79 f0       	breq	.+30     	; 0x532 <__fp_splitA+0x2a>
 514:	87 95       	ror	r24
 516:	08 95       	ret
 518:	12 16       	cp	r1, r18
 51a:	13 06       	cpc	r1, r19
 51c:	14 06       	cpc	r1, r20
 51e:	55 1f       	adc	r21, r21
 520:	f2 cf       	rjmp	.-28     	; 0x506 <__fp_split3+0xe>
 522:	46 95       	lsr	r20
 524:	f1 df       	rcall	.-30     	; 0x508 <__fp_splitA>
 526:	08 c0       	rjmp	.+16     	; 0x538 <__fp_splitA+0x30>
 528:	16 16       	cp	r1, r22
 52a:	17 06       	cpc	r1, r23
 52c:	18 06       	cpc	r1, r24
 52e:	99 1f       	adc	r25, r25
 530:	f1 cf       	rjmp	.-30     	; 0x514 <__fp_splitA+0xc>
 532:	86 95       	lsr	r24
 534:	71 05       	cpc	r23, r1
 536:	61 05       	cpc	r22, r1
 538:	08 94       	sec
 53a:	08 95       	ret

0000053c <__fp_zero>:
 53c:	e8 94       	clt

0000053e <__fp_szero>:
 53e:	bb 27       	eor	r27, r27
 540:	66 27       	eor	r22, r22
 542:	77 27       	eor	r23, r23
 544:	cb 01       	movw	r24, r22
 546:	97 f9       	bld	r25, 7
 548:	08 95       	ret

0000054a <__mulsf3>:
 54a:	0e 94 b8 02 	call	0x570	; 0x570 <__mulsf3x>
 54e:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_round>
 552:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_pscA>
 556:	38 f0       	brcs	.+14     	; 0x566 <__mulsf3+0x1c>
 558:	0e 94 22 03 	call	0x644	; 0x644 <__fp_pscB>
 55c:	20 f0       	brcs	.+8      	; 0x566 <__mulsf3+0x1c>
 55e:	95 23       	and	r25, r21
 560:	11 f0       	breq	.+4      	; 0x566 <__mulsf3+0x1c>
 562:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_inf>
 566:	0c 94 18 03 	jmp	0x630	; 0x630 <__fp_nan>
 56a:	11 24       	eor	r1, r1
 56c:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_szero>

00000570 <__mulsf3x>:
 570:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_split3>
 574:	70 f3       	brcs	.-36     	; 0x552 <__mulsf3+0x8>

00000576 <__mulsf3_pse>:
 576:	95 9f       	mul	r25, r21
 578:	c1 f3       	breq	.-16     	; 0x56a <__mulsf3+0x20>
 57a:	95 0f       	add	r25, r21
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	55 1f       	adc	r21, r21
 580:	62 9f       	mul	r22, r18
 582:	f0 01       	movw	r30, r0
 584:	72 9f       	mul	r23, r18
 586:	bb 27       	eor	r27, r27
 588:	f0 0d       	add	r31, r0
 58a:	b1 1d       	adc	r27, r1
 58c:	63 9f       	mul	r22, r19
 58e:	aa 27       	eor	r26, r26
 590:	f0 0d       	add	r31, r0
 592:	b1 1d       	adc	r27, r1
 594:	aa 1f       	adc	r26, r26
 596:	64 9f       	mul	r22, r20
 598:	66 27       	eor	r22, r22
 59a:	b0 0d       	add	r27, r0
 59c:	a1 1d       	adc	r26, r1
 59e:	66 1f       	adc	r22, r22
 5a0:	82 9f       	mul	r24, r18
 5a2:	22 27       	eor	r18, r18
 5a4:	b0 0d       	add	r27, r0
 5a6:	a1 1d       	adc	r26, r1
 5a8:	62 1f       	adc	r22, r18
 5aa:	73 9f       	mul	r23, r19
 5ac:	b0 0d       	add	r27, r0
 5ae:	a1 1d       	adc	r26, r1
 5b0:	62 1f       	adc	r22, r18
 5b2:	83 9f       	mul	r24, r19
 5b4:	a0 0d       	add	r26, r0
 5b6:	61 1d       	adc	r22, r1
 5b8:	22 1f       	adc	r18, r18
 5ba:	74 9f       	mul	r23, r20
 5bc:	33 27       	eor	r19, r19
 5be:	a0 0d       	add	r26, r0
 5c0:	61 1d       	adc	r22, r1
 5c2:	23 1f       	adc	r18, r19
 5c4:	84 9f       	mul	r24, r20
 5c6:	60 0d       	add	r22, r0
 5c8:	21 1d       	adc	r18, r1
 5ca:	82 2f       	mov	r24, r18
 5cc:	76 2f       	mov	r23, r22
 5ce:	6a 2f       	mov	r22, r26
 5d0:	11 24       	eor	r1, r1
 5d2:	9f 57       	subi	r25, 0x7F	; 127
 5d4:	50 40       	sbci	r21, 0x00	; 0
 5d6:	9a f0       	brmi	.+38     	; 0x5fe <__mulsf3_pse+0x88>
 5d8:	f1 f0       	breq	.+60     	; 0x616 <__mulsf3_pse+0xa0>
 5da:	88 23       	and	r24, r24
 5dc:	4a f0       	brmi	.+18     	; 0x5f0 <__mulsf3_pse+0x7a>
 5de:	ee 0f       	add	r30, r30
 5e0:	ff 1f       	adc	r31, r31
 5e2:	bb 1f       	adc	r27, r27
 5e4:	66 1f       	adc	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	91 50       	subi	r25, 0x01	; 1
 5ec:	50 40       	sbci	r21, 0x00	; 0
 5ee:	a9 f7       	brne	.-22     	; 0x5da <__mulsf3_pse+0x64>
 5f0:	9e 3f       	cpi	r25, 0xFE	; 254
 5f2:	51 05       	cpc	r21, r1
 5f4:	80 f0       	brcs	.+32     	; 0x616 <__mulsf3_pse+0xa0>
 5f6:	0c 94 12 03 	jmp	0x624	; 0x624 <__fp_inf>
 5fa:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_szero>
 5fe:	5f 3f       	cpi	r21, 0xFF	; 255
 600:	e4 f3       	brlt	.-8      	; 0x5fa <__mulsf3_pse+0x84>
 602:	98 3e       	cpi	r25, 0xE8	; 232
 604:	d4 f3       	brlt	.-12     	; 0x5fa <__mulsf3_pse+0x84>
 606:	86 95       	lsr	r24
 608:	77 95       	ror	r23
 60a:	67 95       	ror	r22
 60c:	b7 95       	ror	r27
 60e:	f7 95       	ror	r31
 610:	e7 95       	ror	r30
 612:	9f 5f       	subi	r25, 0xFF	; 255
 614:	c1 f7       	brne	.-16     	; 0x606 <__mulsf3_pse+0x90>
 616:	fe 2b       	or	r31, r30
 618:	88 0f       	add	r24, r24
 61a:	91 1d       	adc	r25, r1
 61c:	96 95       	lsr	r25
 61e:	87 95       	ror	r24
 620:	97 f9       	bld	r25, 7
 622:	08 95       	ret

00000624 <__fp_inf>:
 624:	97 f9       	bld	r25, 7
 626:	9f 67       	ori	r25, 0x7F	; 127
 628:	80 e8       	ldi	r24, 0x80	; 128
 62a:	70 e0       	ldi	r23, 0x00	; 0
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	08 95       	ret

00000630 <__fp_nan>:
 630:	9f ef       	ldi	r25, 0xFF	; 255
 632:	80 ec       	ldi	r24, 0xC0	; 192
 634:	08 95       	ret

00000636 <__fp_pscA>:
 636:	00 24       	eor	r0, r0
 638:	0a 94       	dec	r0
 63a:	16 16       	cp	r1, r22
 63c:	17 06       	cpc	r1, r23
 63e:	18 06       	cpc	r1, r24
 640:	09 06       	cpc	r0, r25
 642:	08 95       	ret

00000644 <__fp_pscB>:
 644:	00 24       	eor	r0, r0
 646:	0a 94       	dec	r0
 648:	12 16       	cp	r1, r18
 64a:	13 06       	cpc	r1, r19
 64c:	14 06       	cpc	r1, r20
 64e:	05 06       	cpc	r0, r21
 650:	08 95       	ret

00000652 <__fp_round>:
 652:	09 2e       	mov	r0, r25
 654:	03 94       	inc	r0
 656:	00 0c       	add	r0, r0
 658:	11 f4       	brne	.+4      	; 0x65e <__fp_round+0xc>
 65a:	88 23       	and	r24, r24
 65c:	52 f0       	brmi	.+20     	; 0x672 <__fp_round+0x20>
 65e:	bb 0f       	add	r27, r27
 660:	40 f4       	brcc	.+16     	; 0x672 <__fp_round+0x20>
 662:	bf 2b       	or	r27, r31
 664:	11 f4       	brne	.+4      	; 0x66a <__fp_round+0x18>
 666:	60 ff       	sbrs	r22, 0
 668:	04 c0       	rjmp	.+8      	; 0x672 <__fp_round+0x20>
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	08 95       	ret

00000674 <_exit>:
 674:	f8 94       	cli

00000676 <__stop_program>:
 676:	ff cf       	rjmp	.-2      	; 0x676 <__stop_program>
